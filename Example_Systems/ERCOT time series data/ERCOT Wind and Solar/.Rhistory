install.packages("profvis")
install.packages("curl")
# pre-requisites
library(curl)
library(profvis)
source('./ninja_automator.r')
# insert your API authorisation token here
#token = 'a85c3342758c12e8a306d0d849bced5be1a7d649' #bharat govil
token = 'b26c00672f32c1363a4ccbce0872657ec732059a' #jesse jenkins
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
# Coordinates:
coords = read.csv('wind_solar_locations.csv')
wind_lat = coords$Lat[coords$Wind == 1]
wind_lon = coords$Lon[coords$Wind == 1]
solar_lat = coords$Lat[coords$Solar == 1]
solar_lon = coords$Lon[coords$Solar == 1]
View(coords)
# Years:
year_csv = read.csv("years.csv")
years = year_csv$year
# Wind:
wind_capacity <- 1 # (kW)
hub_height <- 90 # (m)
turbine_model <- "Vestas+V110+2000"
# Solar:
solar_capacity <- 1 # (kW)
system_loss <- 0.1 # (fraction)
tracking <- 1 # (0 = None, 1 = Azimuth, 2 = Tilt and Azimuth)
tilt <- 35 # (degrees)
azimuth <- 180 # (degrees)
total_count <- 0
wind_count <- length(wind_lat)
solar_count <- length(solar_lat)
# EXAMPLE 4 :::: read a set of wind farms from CSV - save their outputs to CSV
#                this is the same as example 3 - the UK capital cities
#    your csv must have a strict structure: one row per farm, colums = lat, lon, from, to, dataset, capacity, height, turbine - and optionally name (all lowercase!)
for (i in years){
wind_from = paste("01/01/", as.character(i), sep="")
wind_to = paste("31/12/", as.character(i), sep="")
z = ninja_aggregate_wind(wind_lat, wind_lon, wind_from, wind_to, "merra2", wind_capacity, hub_height, turbine_model)
path <- paste('renewables.ninja.wind.output', as.character(i), '.csv', sep="")
write.csv(z, path, row.names=FALSE)
cat(path, "has been downloaded\n")
total_count = total_count + wind_count
if(floor((total_count + wind_count)/6)  > floor(total_count / 6))
{
writeLines("Waiting for 1 minute- 6 Downloads per minute reached")
pause(60)
writeLines("1 minute is up!")
}
if(floor((total_count + wind_count)/50)  > floor(total_count / 50))
{
writeLines("Waiting for 60 minutes- 50 Downloads per hour reached")
pause(3600)
writeLines("60 minutes are up!")
}
}
source('./ninja_automator.r')
install.packages("RCurl")
source('./ninja_automator.r')
# insert your API authorisation token here
#token = 'a85c3342758c12e8a306d0d849bced5be1a7d649' #bharat govil
token = 'b26c00672f32c1363a4ccbce0872657ec732059a' #jesse jenkins
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
# User Input Variables
# Coordinates:
coords = read.csv('wind_solar_locations.csv')
wind_lat = coords$Lat[coords$Wind == 1]
wind_lon = coords$Lon[coords$Wind == 1]
solar_lat = coords$Lat[coords$Solar == 1]
solar_lon = coords$Lon[coords$Solar == 1]
# Years:
year_csv = read.csv("years.csv")
years = year_csv$year
# Wind:
wind_capacity <- 1 # (kW)
hub_height <- 90 # (m)
turbine_model <- "Vestas+V110+2000"
# Solar:
solar_capacity <- 1 # (kW)
system_loss <- 0.1 # (fraction)
tracking <- 1 # (0 = None, 1 = Azimuth, 2 = Tilt and Azimuth)
tilt <- 35 # (degrees)
azimuth <- 180 # (degrees)
total_count <- 0
wind_count <- length(wind_lat)
solar_count <- length(solar_lat)
#####
## ##  DOWNLOAD RENEWABLE TIME SERIES DATA FOR MULTIPLE LOCATIONS
## ##  USING CSV FILES FOR DATA INPUT AND OUTPUT
#####
# EXAMPLE 4 :::: read a set of wind farms from CSV - save their outputs to CSV
#                this is the same as example 3 - the UK capital cities
#    your csv must have a strict structure: one row per farm, colums = lat, lon, from, to, dataset, capacity, height, turbine - and optionally name (all lowercase!)
for (i in years){
wind_from = paste("01/01/", as.character(i), sep="")
wind_to = paste("31/12/", as.character(i), sep="")
z = ninja_aggregate_wind(wind_lat, wind_lon, wind_from, wind_to, "merra2", wind_capacity, hub_height, turbine_model)
path <- paste('renewables.ninja.wind.output', as.character(i), '.csv', sep="")
write.csv(z, path, row.names=FALSE)
cat(path, "has been downloaded\n")
total_count = total_count + wind_count
if(floor((total_count + wind_count)/6)  > floor(total_count / 6))
{
writeLines("Waiting for 1 minute- 6 Downloads per minute reached")
pause(60)
writeLines("1 minute is up!")
}
if(floor((total_count + wind_count)/50)  > floor(total_count / 50))
{
writeLines("Waiting for 60 minutes- 50 Downloads per hour reached")
pause(3600)
writeLines("60 minutes are up!")
}
}
for (i in years){
solar_from = paste("01/01/", as.character(i), sep="")
solar_to = paste("31/12/", as.character(i), sep="")
z = ninja_aggregate_solar(solar_lat, solar_lon, solar_from, solar_to, "merra2", solar_capacity, system_loss, tracking, tilt, azimuth, name= rep("placeholder", times = length(solar_lat)))
path <- paste('renewables.ninja.solar.output', as.character(i), ".csv", sep="")
write.csv(z, path, row.names=FALSE)
cat(path, "has been downloaded\n")
total_count = total_count + solar_count
if(floor((total_count + solar_count)/6)  > floor(total_count / 6))
{
writeLines("Waiting for 1 minute- 6 Downloads per minute reached")
pause(60)
}
if(floor((total_count + solar_count)/50)  > floor(total_count / 50))
{
writeLines("Waiting for 60 minutes- 50 Downloads per hour reached")
pause(3600)
}
}
path <- "/Users/jdj2/Dropbox (Princeton)/ZMC electricity market challenges/01 - Collab with Jacob Mays/Data/Wind and Solar/"
windpath <- paste0(path,"Wind_2002-2019")
solarpath <- paste0(path,"Solar_2002-2019")
# Create data frame for wind & solar data
# Three profiles reflecting average of 3 individual renewables.ninja profiles each:
# 1. Interior wind (wind profiles 1-3); 2. Coastal wind (wind profiles 4-6);
# 3. Solar PV (PV profiles 1-3)
RE <- data.frame(Year = numeric(0), Hour_Index = numeric(0),
Hour_End = character(0), Date = character(0),
Interior_Wind = numeric(0), Coastal_Wind = numeric(0),
Solar_PV = numeric(0))
y=2002
WIND <- read.csv(paste0(windpath, "renewables.ninja.wind.output",y,".csv"))
SOLAR <- read.csv(paste0(windpath, "renewables.ninja.solar.output",y,".csv"))
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"))
SOLAR <- read.csv(paste0(windpath, "/renewables.ninja.solar.output",y,".csv"))
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"))
View(SOLAR)
WIND$time[1]
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
WIND$time[1]
strsplit(WIND$time[1]," ")
matrix(unlist(strsplit(WIND$time[1]," ")), ncol=2, byrow=T)[,2],
matrix(unlist(strsplit(WIND$time[1]," ")), ncol=2, byrow=T)[,2]
matrix(unlist(strsplit(WIND$time[1]," ")), ncol=2, byrow=T)[,1]
h <- nrow(WIND)
h
TEMP <- data.frame(Year = numeric(h), Hour_Index = numeric(h),
Hour_End = character(h), Date = character(h),
Interior_Wind = numeric(h), Coastal_Wind = numeric(h),
Solar_PV = numeric(h))
matrix(unlist(strsplit(WIND$time," ")), ncol=2, byrow=T)[,1]
matrix(unlist(strsplit(WIND$time," ")), ncol=2, byrow=T)
unlist(strsplit(WIND$time," ")
unlist(strsplit(WIND$time," "))
unlist(strsplit(WIND$time," "))
lenght(unlist(strsplit(WIND$time," "))
)
length(unlist(strsplit(WIND$time," ")))
8760*2
length(unlist(strsplit(WIND$time," ")))[1]
unlist(strsplit(WIND$time," "))[1]
unlist(strsplit(WIND$time," "))[0]
unlist(strsplit(WIND$time," "))[2]
unlist(strsplit(WIND$time," "))[17519]
nrow(WIND)
RE <- data.frame(Year = numeric(0), Hour_Index = numeric(0),
Interior_Wind = numeric(0), Coastal_Wind = numeric(0),
Solar_PV = numeric(0))
rep(y,h)
c(1:h)
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
h <- nrow(WIND)
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV = (SOLAR$outputV1+SOLAR$outputV2+SOLAR$outputV3)/3))
rep(y,h)
(WIND$outputV1+WIND$outputV2+WIND$outputV3)/3
lenght( (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3)
length( (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3)
length( (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3)
length((SOLAR$outputV1+SOLAR$outputV2+SOLAR$outputV3)/3))
length(SOLAR$outputV1+SOLAR$outputV2+SOLAR$outputV3)/3))
length(SOLAR$outputV1+SOLAR$outputV2+SOLAR$outputV3)/3)
length((SOLAR$outputV1+SOLAR$outputV2+SOLAR$outputV3)/3)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
View(SOLAR)
(SOLAR[2]+SOLAR[3]+SOLAR[4])/3)
(SOLAR[2]+SOLAR[3]+SOLAR[4])/3
RE <- data.frame(Year = numeric(0), Hour_Index = numeric(0),
Interior_Wind = numeric(0), Coastal_Wind = numeric(0),
Solar_PV_DC = numeric(0), Solar_PV_AC = numeric(0))
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
h <- nrow(WIND)
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR[2]+SOLAR[3]+SOLAR[4])/3,
Solar_PV_AC = min((Solar_PV_dc/(1-0.1)*1.33),1)
))
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR[2]+SOLAR[3]+SOLAR[4])/3,
Solar_PV_AC = min((Solar_PV_DC/(1-0.1)*1.33),1)
))
(min(((SOLAR[2])/(1-0.1)*1.33),1)
)
((SOLAR[2])/(1-0.1)*1.33)
min(((SOLAR[2])/(1-0.1)*1.33),1)
apply(((SOLAR[2])/(1-0.1)*1.33),1, fun=min)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR[2]/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR[3]/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR[4]/(1-L)*R*(1-L)
View(SOLAR)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
SOLAR[SOLAR$AC1>1,]$AC1
SOLAR[SOLAR$AC1>1,]
SOLAR$AC1>1
SOLAR[SOLAR$AC1>1,]
SOLAR$AC1 <- SOLAR[2]/(1-L)*R*(1-L)
SOLAR$AC1
SOLAR[SOLAR$AC1>1,]$AC1
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2
SOLAR$AC1 <- SOLAR[2]/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR[3]/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR[4]/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
mean(SOLAR[2])
mean(as.numeric(SOLAR[2]))
SOLAR[2]
mean(SOLAR$placeholder)
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLARplaceholder.2/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLARplaceholder.3/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
SOLAR$placeholder
SOLARplaceholder.2
SOLAR$placeholder.2
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.3/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
SOLAR$placeholder.2
SOLAR$placeholder.3
RE <- data.frame(Year = numeric(0), Hour_Index = numeric(0),
Interior_Wind = numeric(0), Coastal_Wind = numeric(0),
Solar_PV_DC = numeric(0), Solar_PV_AC = numeric(0))
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
h <- nrow(WIND)
# Create AC adjusted profiles for solar PV. AC = Min(DC/(1-L)*R*(1-L), 1.0)
# where L is the system losses (10%) and R is the AC:DC ratio (1.33).
# Note: by default, renewables.ninja assumes DC capacity = AC inverter capacity and DC-AC losses are 10%
# See https://github.com/renewables-ninja/gsee/blob/master/gsee/pv.py
# So adjusting here to standard utility scale PV system configurations for US
# with 1.33:1 DC:AC ratio as per https://emp.lbl.gov/sites/default/files/lbnl_utility_scale_solar_2019_edition_final.pdf (p. ii)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
SOLARplaceholder.2
mean(SOLAR$AC1)
mean(solar$placeholder)
mean(SOLAR$placeholder)
mean(SOLAR$placeholder)/mean(SOLAR$AC1)
mean(SOLAR$AC1)/mean(SOLAR$placeholder)
mean(SOLAR$AC2)/mean(SOLAR$placeholder.1)
mean(SOLAR$AC3)/mean(SOLAR$placeholder.2)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLARSOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLARSOLAR$AC3)/3,
))
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLARSOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3,
))
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
h <- nrow(WIND)
# Create AC adjusted profiles for solar PV. AC = Min(DC/(1-L)*R*(1-L), 1.0)
# where L is the system losses (10%) and R is the AC:DC ratio (1.33).
# Note: by default, renewables.ninja assumes DC capacity = AC inverter capacity and DC-AC losses are 10%
# See https://github.com/renewables-ninja/gsee/blob/master/gsee/pv.py
# So adjusting here to standard utility scale PV system configurations for US
# with 1.33:1 DC:AC ratio as per https://emp.lbl.gov/sites/default/files/lbnl_utility_scale_solar_2019_edition_final.pdf (p. ii)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3,
))
RE <- data.frame(Year = numeric(0), Hour_Index = numeric(0),
Interior_Wind = numeric(0), Coastal_Wind = numeric(0),
Solar_PV_DC = numeric(0), Solar_PV_AC = numeric(0))
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
h <- nrow(WIND)
# Create AC adjusted profiles for solar PV. AC = Min(DC/(1-L)*R*(1-L), 1.0)
# where L is the system losses (10%) and R is the AC:DC ratio (1.33).
# Note: by default, renewables.ninja assumes DC capacity = AC inverter capacity and DC-AC losses are 10%
# See https://github.com/renewables-ninja/gsee/blob/master/gsee/pv.py
# So adjusting here to standard utility scale PV system configurations for US
# with 1.33:1 DC:AC ratio as per https://emp.lbl.gov/sites/default/files/lbnl_utility_scale_solar_2019_edition_final.pdf (p. ii)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3,
))
rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3
))
View(RE)
RE <- rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3
))
plot(x=c(1:8760), y=RE$Interior_Wind)
plot(x=c(1:8760), y=RE$Interior_Wind, type=l)
plot(x=c(1:8760), y=RE$Interior_Wind, type=L)
plot(x=c(1:8760), y=RE$Interior_Wind, type="l")
line(x=c(1:8760), y=RE$Coastal_Wind, type="l", col="blue")
line(x=c(1:8760), y=RE$Coastal_Wind, type="l", col="b")
mean(RE$Interior_Wind)
mean(RE$Coastal_Wind)
mean(WIND$outputV1)
mean(WIND$outputV2)
mean(WIND$outputV3)
mean(WIND$outputV4)
mean(WIND$outputV5)
mean(WIND$outputV6)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
RE <- rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3
))
path <- "/Users/jdj2/Dropbox (Princeton)/ZMC electricity market challenges/01 - Collab with Jacob Mays/Data/Wind and Solar/"
windpath <- paste0(path,"Wind_2002-2019")
solarpath <- paste0(path,"Solar_2002-2019")
# Create data frame for wind & solar data
# Four profiles reflecting average of 3 individual renewables.ninja profiles each:
# 1. Interior wind (wind profiles 1-3); 2. Coastal wind (wind profiles 4-6);
# 3. Solar PV (PV profiles 1-3) in DC rated capacity terms;
# 4. Solar PV (PV profiles 1-3) in AC rated capacity terms assuming 10% system losses and 1.33:1 DC:AC ratio
RE <- data.frame(Year = numeric(0), Hour_Index = numeric(0),
Interior_Wind = numeric(0), Coastal_Wind = numeric(0),
Solar_PV_DC = numeric(0), Solar_PV_AC = numeric(0))
# Read wind and solar time series data and compile RE data frame
for(y in 2002:2019){
WIND <- read.csv(paste0(windpath, "/renewables.ninja.wind.output",y,".csv"), stringsAsFactors=F)
SOLAR <- read.csv(paste0(solarpath, "/renewables.ninja.solar.output",y,".csv"), stringsAsFactors=F)
h <- nrow(WIND)
# Create AC adjusted profiles for solar PV. AC = Min(DC/(1-L)*R*(1-L), 1.0)
# where L is the system losses (10%) and R is the AC:DC ratio (1.33).
# Note: by default, renewables.ninja assumes DC capacity = AC inverter capacity and DC-AC losses are 10%
# See https://github.com/renewables-ninja/gsee/blob/master/gsee/pv.py
# So adjusting here to standard utility scale PV system configurations for US
# with 1.33:1 DC:AC ratio as per https://emp.lbl.gov/sites/default/files/lbnl_utility_scale_solar_2019_edition_final.pdf (p. ii)
L = 0.1
R = 1.33
SOLAR$AC1 <- SOLAR$placeholder/(1-L)*R*(1-L)
SOLAR$AC2 <- SOLAR$placeholder.1/(1-L)*R*(1-L)
SOLAR$AC3 <- SOLAR$placeholder.2/(1-L)*R*(1-L)
SOLAR[SOLAR$AC1>1,]$AC1 = 1.0
SOLAR[SOLAR$AC2>1,]$AC2 = 1.0
SOLAR[SOLAR$AC3>1,]$AC3 = 1.0
RE <- rbind(RE, data.frame(Year = rep(y,h), Hour_Index = c(1:h),
Interior_Wind = (WIND$outputV1+WIND$outputV2+WIND$outputV3)/3,
Coastal_Wind = (WIND$outputV4+WIND$outputV5+WIND$outputV6)/3,
Solar_PV_DC = (SOLAR$placeholder+SOLAR$placeholder.1+SOLAR$placeholder.2)/3,
Solar_PV_AC = (SOLAR$AC1+SOLAR$AC2+SOLAR$AC3)/3
))
}
write.csv(RE, paste0(path,"/ERCOT_renewables_2002_2019.csv"))
